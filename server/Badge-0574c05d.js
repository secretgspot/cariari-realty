'use strict';

var api = require('./api-12e8b0c7.js');

/* src\components\UI\Badge.svelte generated by Svelte v3.12.1 */

const css = {
	code: ".badge.svelte-1sub8up{display:inline-flex;align-items:center}.icon.svelte-1sub8up{width:30px;height:27px}.label.svelte-1sub8up{text-transform:uppercase;color:var(--color-dark)}.value.svelte-1sub8up{font-size:1.8em}.row.svelte-1sub8up{flex-direction:row-reverse;justify-content:center}.row.svelte-1sub8up .label.svelte-1sub8up{margin-right:1rem}.row.svelte-1sub8up .value.svelte-1sub8up{display:flex;flex-wrap:wrap}.column.svelte-1sub8up{flex-direction:column}span.svelte-1sub8up{margin:0 0.2rem;border:1px dashed hsla(0, 0%, 100%, 0.3);padding:0 0.2rem;border-radius:6px;border-top:none;border-bottom:none;text-transform:uppercase}",
	map: "{\"version\":3,\"file\":\"Badge.svelte\",\"sources\":[\"Badge.svelte\"],\"sourcesContent\":[\"<script>\\r\\n\\texport let type = 'text'; // icon | text\\r\\n\\texport let label;\\r\\n\\texport let value;\\r\\n\\texport let direction = 'column'; // column | row\\r\\n\\texport let loop = false; // for cases where object is passed\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n\\t.badge {\\r\\n\\t\\tdisplay: inline-flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\twidth: 30px;\\r\\n\\t\\theight: 27px;\\r\\n\\t}\\r\\n\\t.label {\\r\\n\\t\\ttext-transform: uppercase;\\r\\n\\t\\t/* line-height: 1; */\\r\\n\\t\\t/* font-family: 'Economica', sans-serif; */\\r\\n\\t\\tcolor: var(--color-dark);\\r\\n\\t}\\r\\n\\t.value {\\r\\n\\t\\tfont-size: 1.8em;\\r\\n\\t\\t/* line-height: 1; */\\r\\n\\t\\t/* font-family: 'Cabin', sans-serif; */\\r\\n\\t}\\r\\n\\t.row {\\r\\n\\t\\tflex-direction: row-reverse;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t}\\r\\n\\t.row .label { margin-right: 1rem; }\\r\\n\\t.row .value {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-wrap: wrap;\\r\\n\\t}\\r\\n\\t.column {\\r\\n\\t\\tflex-direction: column;\\r\\n\\t}\\r\\n\\r\\n\\tspan {\\r\\n\\t\\tmargin: 0 0.2rem;\\r\\n\\t\\tborder: 1px dashed hsla(0, 0%, 100%, 0.3);\\r\\n\\t\\tpadding: 0 0.2rem;\\r\\n\\t\\tborder-radius: 6px;\\r\\n\\t\\tborder-top: none;\\r\\n\\t\\tborder-bottom: none;\\r\\n\\t\\ttext-transform: uppercase;\\r\\n\\t}\\r\\n</style>\\r\\n\\r\\n<div class=\\\"badge {direction}\\\">\\r\\n{#if type === 'icon'}\\r\\n\\t<img class=\\\"icon\\\" src=\\\"images/icons/icon_{label}.svg\\\" alt=\\\"{label}\\\">\\r\\n\\t<div class=\\\"value\\\">{value}</div>\\r\\n{:else if type === 'text'}\\r\\n\\t{#if loop}\\r\\n\\t<div class=\\\"value\\\">\\r\\n\\t\\t{#each value as val}\\r\\n\\t\\t\\t<span>{ val }</span>\\r\\n\\t\\t{/each}\\r\\n\\t</div>\\r\\n\\t{:else}\\r\\n\\t\\t{#if value}\\r\\n\\t\\t\\t<div class=\\\"value\\\">{value}</div>\\r\\n\\t\\t{:else}\\r\\n\\t\\t\\t<div class=\\\"value\\\">N/A</div>\\r\\n\\t\\t{/if}\\r\\n\\t{/if}\\r\\n\\t<div class=\\\"label\\\">{label}</div>\\r\\n{/if}\\r\\n</div>\"],\"names\":[],\"mappings\":\"AASC,MAAM,eAAC,CAAC,AACP,OAAO,CAAE,WAAW,CACpB,WAAW,CAAE,MAAM,AACpB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AACD,MAAM,eAAC,CAAC,AACP,cAAc,CAAE,SAAS,CAGzB,KAAK,CAAE,IAAI,YAAY,CAAC,AACzB,CAAC,AACD,MAAM,eAAC,CAAC,AACP,SAAS,CAAE,KAAK,AAGjB,CAAC,AACD,IAAI,eAAC,CAAC,AACL,cAAc,CAAE,WAAW,CAC3B,eAAe,CAAE,MAAM,AACxB,CAAC,AACD,mBAAI,CAAC,MAAM,eAAC,CAAC,AAAC,YAAY,CAAE,IAAI,AAAE,CAAC,AACnC,mBAAI,CAAC,MAAM,eAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,OAAO,eAAC,CAAC,AACR,cAAc,CAAE,MAAM,AACvB,CAAC,AAED,IAAI,eAAC,CAAC,AACL,MAAM,CAAE,CAAC,CAAC,MAAM,CAChB,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CACzC,OAAO,CAAE,CAAC,CAAC,MAAM,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,cAAc,CAAE,SAAS,AAC1B,CAAC\"}"
};

const Badge = api.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { type = 'text', label, value, direction = 'column', loop = false } = $$props; // for cases where object is passed

	if ($$props.type === void 0 && $$bindings.type && type !== void 0) $$bindings.type(type);
	if ($$props.label === void 0 && $$bindings.label && label !== void 0) $$bindings.label(label);
	if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
	if ($$props.direction === void 0 && $$bindings.direction && direction !== void 0) $$bindings.direction(direction);
	if ($$props.loop === void 0 && $$bindings.loop && loop !== void 0) $$bindings.loop(loop);

	$$result.css.add(css);

	return `<div class="badge ${api.escape(direction)} svelte-1sub8up">
	${ type === 'icon' ? `<img class="icon svelte-1sub8up" src="images/icons/icon_${api.escape(label)}.svg"${api.add_attribute("alt", label, 0)}>
		<div class="value svelte-1sub8up">${api.escape(value)}</div>` : `${ type === 'text' ? `${ loop ? `<div class="value svelte-1sub8up">
			${api.each(value, (val) => `<span class="svelte-1sub8up">${api.escape(val)}</span>`)}
		</div>` : `${ value ? `<div class="value svelte-1sub8up">${api.escape(value)}</div>` : `<div class="value svelte-1sub8up">N/A</div>` }` }
		<div class="label svelte-1sub8up">${api.escape(label)}</div>` : `` }` }
	</div>`;
});

exports.Badge = Badge;
